@page
@using CoolFan.Pages
@model IndexModel
@{
    ViewData["Title"] = "Home Page";
}

<style>
    .custom-header {
        font-family: 'Georgia', serif;
        color: rgb(0,191,255);
        font-size: 24px;
        font-weight: bold;
        text-align: center;
        background-color: #f8f9fa;
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
        padding: 10px;
        border-radius: 5px;
    }

    .custom-header2 {
        font-family: 'Georgia', serif;
        color: rgb(0,0,205);
        font-weight: 600;
        font-size: 18px;
    }

    .charts-container {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        flex-wrap: wrap;
    }

    .chart {
        flex: 1;
        min-width: 400px;
        margin: 10px;
    }

    .modal {
        align-items: center;
        justify-content: center;
    }

    .rainbow-text {
        font-family: 'Bookman Old Style';
        font-size: 2rem;
        background-image: linear-gradient(to right, red, orange, yellow, green, cyan, blue, violet, red);
        -webkit-background-clip: text;
        color: transparent;
    }
</style>

<h1 class="custom-header">Pomiary chłodzenia serwera</h1>

<div>
    <h3 class="custom-header2">Aktualne Pomiary</h3>
    <p><strong>Temperature:</strong> <span id="temperature">@Model.Temperature</span> °C</p>
    <p><strong>Humidity:</strong><span id="humidity">@Model.Humidity</span> %</p>
</div>

<div class="charts-container">
    <div class="chart">
        <h3 class="custom-header2">Temperature chart</h3>
        <canvas id="temperatureChart" width="400" height="200"></canvas>
    </div>
    <div class="chart">
        <h3 class="custom-header2">Humidity chart</h3>
        <canvas id="humidityChart" width="400" height="200"></canvas>
    </div>
</div>

<!-- Modal -->
<div id="exampleModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 375px;">
        <div class="modal-content">
            <div class="modal-header rainbow-text">
                <h5 class="modal-title">Zuzia i Maja dały radę!</h5>
            </div>
            <div class="modal-body">
                <img src="lib/dora.jpg" alt="Modal Image" style="max-width: 100%; height: auto;">
            </div>
            <div class="modal-footer">
                <button id="closeModalBtn" type="button" class="btn btn-secondary" data-dismiss="modal">zamknij</button>
                <button id="toggleAudioBtn" type="button" class="btn btn-primary">fanfary</button>
            </div>
        </div>
    </div>
</div>

<audio id="modalSound">
    <source src="lib/dora.mp3" type="audio/mpeg">
</audio>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

    <script>
        $(document).ready(function () {
            var maxPoints = 12;

            function getStoredData(key) {
                var data = localStorage.getItem(key);
                return data ? JSON.parse(data) : null;
            }

            function storeData(key, data) {
                localStorage.setItem(key, JSON.stringify(data));
            }

            var temperatureData = getStoredData('temperatureData') || { labels: [], data: [] };
            var humidityData = getStoredData('humidityData') || { labels: [], data: [] };

            var temperatureChart = new Chart(document.getElementById('temperatureChart').getContext('2d'), {
                type: 'line',
                data: {
                    labels: temperatureData.labels,
                    datasets: [{
                        label: 'Temperatura',
                        backgroundColor: 'rgb(255, 99, 132)',
                        borderColor: 'rgb(255, 99, 132)',
                        data: temperatureData.data
                    }]
                },
                options: {}
            });

            var humidityChart = new Chart(document.getElementById('humidityChart').getContext('2d'), {
                type: 'line',
                data: {
                    labels: humidityData.labels,
                    datasets: [{
                        label: 'Wilgotność',
                        backgroundColor: 'rgb(54, 162, 235)',
                        borderColor: 'rgb(54, 162, 235)',
                        data: humidityData.data
                    }]
                },
                options: {}
            });

            function fetchData() {
                $.ajax({
                    url: '@Url.Page("Index", "SensorData")',
                    method: 'GET',
                    success: function (data) {
                        if (data.error) {
                            console.error(data.error);
                            return;
                        }

                        $('#temperature').text(data.temperature);
                        $('#humidity').text(data.humidity);

                        var now = new Date().toLocaleTimeString();

                        if (temperatureChart.data.labels.length >= maxPoints) {
                            temperatureChart.data.labels.shift();
                            temperatureChart.data.datasets[0].data.shift();
                        }

                        if (humidityChart.data.labels.length >= maxPoints) {
                            humidityChart.data.labels.shift();
                            humidityChart.data.datasets[0].data.shift();
                        }

                        temperatureChart.data.labels.push(now);
                        temperatureChart.data.datasets[0].data.push(data.temperature);
                        temperatureChart.update();

                        humidityChart.data.labels.push(now);
                        humidityChart.data.datasets[0].data.push(data.humidity);
                        humidityChart.update();

                        storeData('temperatureData', {
                            labels: temperatureChart.data.labels,
                            data: temperatureChart.data.datasets[0].data
                        });

                        storeData('humidityData', {
                            labels: humidityChart.data.labels,
                            data: humidityChart.data.datasets[0].data
                        });
                    }
                });
            }

            setInterval(fetchData, 5000);
            fetchData();
        });
    </script>

    <!-- Confetti -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var modal = document.getElementById("exampleModal");
            var canvas = document.getElementById("canvas");
            var ctx = canvas.getContext("2d");
            var confettiAnimationId = null;
            var confetti = [];

            // Audio element
            var modalSound = document.getElementById("modalSound");
            var toggleAudioBtn = document.getElementById("toggleAudioBtn");

            // Set initial canvas dimensions
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;

            // Handle window resize to adjust canvas dimensions
            window.addEventListener('resize', function () {
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
                // Additional logic to adjust confetti animation if needed
            });

            const confettiCount = 300;
            const gravity = 0.5;
            const terminalVelocity = 5;
            const drag = 0.075;
            const colors = [
                { front: 'red', back: 'darkred' },
                { front: 'green', back: 'darkgreen' },
                { front: 'blue', back: 'darkblue' },
                { front: 'yellow', back: 'darkyellow' },
                { front: 'orange', back: 'darkorange' },
                { front: 'pink', back: 'darkpink' },
                { front: 'purple', back: 'darkpurple' },
                { front: 'turquoise', back: 'darkturquoise' }
            ];

            function resizeCanvas() {
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
            }

            function randomRange(min, max) {
                return Math.random() * (max - min) + min;
            }

            function initConfetti() {
                for (let i = 0; i < confettiCount; i++) {
                    confetti.push({
                        color: colors[Math.floor(randomRange(0, colors.length))],
                        dimensions: {
                            x: randomRange(10, 20),
                            y: randomRange(10, 30)
                        },
                        position: {
                            x: randomRange(0, canvas.width),
                            y: canvas.height - 1
                        },
                        rotation: randomRange(0, 2 * Math.PI),
                        scale: {
                            x: 1,
                            y: 1
                        },
                        velocity: {
                            x: randomRange(-25, 25),
                            y: randomRange(0, -50)
                        }
                    });
                }
            }

            function render() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);

                confetti.forEach((confetto, index) => {
                    let width = confetto.dimensions.x * confetto.scale.x;
                    let height = confetto.dimensions.y * confetto.scale.y;

                    ctx.translate(confetto.position.x, confetto.position.y);
                    ctx.rotate(confetto.rotation);

                    confetto.velocity.x -= confetto.velocity.x * drag;
                    confetto.velocity.y = Math.min(confetto.velocity.y + gravity, terminalVelocity);
                    confetto.velocity.x += Math.random() > 0.5 ? Math.random() : -Math.random();

                    confetto.position.x += confetto.velocity.x;
                    confetto.position.y += confetto.velocity.y;

                    if (confetto.position.y >= canvas.height) confetti.splice(index, 1);

                    if (confetto.position.x > canvas.width) confetto.position.x = 0;
                    if (confetto.position.x < 0) confetto.position.x = canvas.width;

                    confetto.scale.y = Math.cos(confetto.position.y * 0.1);
                    ctx.fillStyle = confetto.scale.y > 0 ? confetto.color.front : confetto.color.back;

                    ctx.fillRect(-width / 2, -height / 2, width, height);

                    ctx.setTransform(1, 0, 0, 1, 0, 0);
                });

                if (confetti.length <= 10) initConfetti();

                confettiAnimationId = window.requestAnimationFrame(render);
            }

            function startConfetti() {
                if (!confettiAnimationId) {
                    initConfetti();
                    render();
                }
            }

            function stopConfetti() {
                if (confettiAnimationId) {
                    cancelAnimationFrame(confettiAnimationId);
                    confettiAnimationId = null;
                    ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas
                    confetti = []; // Clear confetti array
                }
            }


            modal.style.display = "block";
            startConfetti();
            modalSound.play();


            var closeModalBtn = document.getElementById("closeModalBtn");
            closeModalBtn.addEventListener("click", function () {
                modal.style.display = "none";
                stopConfetti();
                modalSound.pause();
                modalSound.currentTime = 0;
            });

            toggleAudioBtn.addEventListener("click", function () {
                if (modalSound.paused) {
                    modalSound.play();
                    toggleAudioBtn.textContent = "fanfary stop";
                } else {
                    modalSound.pause();
                    toggleAudioBtn.textContent = "fanfary";
                }
            });

        });
    </script>
}